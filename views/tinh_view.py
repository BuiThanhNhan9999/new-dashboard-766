import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from utils.config import CHART_COLORS
from typing import Dict, List, Optional, Any, Union


class TinhViewRenderer:
    """Class ƒë·ªÉ qu·∫£n l√Ω vi·ªác hi·ªÉn th·ªã view c·∫•p t·ªânh"""
    
    def __init__(self, data: Dict[str, Any], tinh_name: str):
        self.data = data
        self.tinh_name = tinh_name
        self.summary = None
    
    def render(self):
        """Entry point ch√≠nh ƒë·ªÉ render view"""
        # Hi·ªÉn th·ªã d·ªØ li·ªáu report_766 n·∫øu c√≥
        if self.data.get('report_tinh_766_service') and len(self.data['report_tinh_766_service']) > 0:
            filtered = [item for item in self.data['report_tinh_766_service'] if item.get("ID") == "398126"]
            if filtered:
                record = filtered[0]
                tong_diem = record.get("TONG_SCORE", "N/A")
                xep_hang = record.get("ROW_STT", "N/A")

                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(
                        f"""
                        <div style="text-align:center;">
                        <div style="font-size:17px; color: #888; font-weight: 400; letter-spacing:1px; margin-bottom: 5px;">
                            T·ªïng ƒëi·ªÉm
                        </div>
                        <div style="font-size:52px; font-weight: bold; line-height: 1; color: #1c1c1c; display: flex; justify-content: center; align-items: center; gap:13px;">
                            <span style="font-size:36px; vertical-align:middle;">‚≠êÔ∏è</span>
                            <span>{tong_diem}</span>
                        </div>
                        </div>
                        """, unsafe_allow_html=True
                    )
                with col2:
                    st.markdown(
                        f"""
                        <div style="text-align:center;">
                        <div style="font-size:17px; color: #888; font-weight: 400; letter-spacing:1px; margin-bottom: 5px;">
                            X·∫øp h·∫°ng
                        </div>
                        <div style="font-size:52px; font-weight: bold; line-height: 1; color: #1c1c1c; display: flex; justify-content: center; align-items: center; gap:13px;">
                            <span style="font-size:36px; vertical-align:middle;">üèÜ</span>
                            <span>{xep_hang}</span>
                        </div>
                        </div>
                        """, unsafe_allow_html=True
                    )
            else:
                st.info("Kh√¥ng t√¨m th·∫•y b·∫£n ghi c√≥ ID = 398126")
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o 766 ƒë·ªÉ hi·ªÉn th·ªã")
        st.divider()

        self._render_charts()
        self._render_chi_so_766()
        # st.divider()
        # self._render_overview_metrics()
    
    def _render_charts(self):
        """Render bi·ªÉu ƒë·ªì xu h∆∞·ªõng v√† gauge"""
        col1, col2 = st.columns([2, 1])
        with col1:
            TinhChartRenderer.render_trend_chart(self.data)
        with col2:
            TinhChartRenderer.render_gauge_chart(self.data)
    
    def _render_chi_so_766(self):
        """Render 7 nh√≥m ch·ªâ s·ªë theo Qƒê 766"""
        TinhChartRenderer.render_chi_so_766(self.data)
    
    def _render_overview_metrics(self):
        """Render metrics t·ªïng quan"""
        if not self._validate_summary_data():
            return
        
        self.summary = self.data['monthly_summary'][0]
        metrics_renderer = TinhMetricsRenderer(self.summary)
        metrics_renderer.render_all_metrics()
    
    def _validate_summary_data(self) -> bool:
        """Ki·ªÉm tra d·ªØ li·ªáu summary"""
        if not self.data.get('monthly_summary'):
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªïng h·ª£p")
            return False
        return True


class TinhChartRenderer:
    """Class chuy√™n x·ª≠ l√Ω vi·ªác render bi·ªÉu ƒë·ªì cho t·ªânh"""
    
    @staticmethod
    def render_trend_chart(data: Dict[str, Any]):
        """Render bi·ªÉu ƒë·ªì xu h∆∞·ªõng"""
        if not data.get('xuhuong'):
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu xu h∆∞·ªõng ƒëi·ªÉm")
            return
        
        df_trend = pd.DataFrame(data['xuhuong'])
        df_trend = TinhChartRenderer._prepare_trend_data(df_trend)
        
        fig = px.line(
            df_trend, 
            x='MONTH', 
            y='TB_SCORE',
            title="üìà Xu h∆∞·ªõng ƒëi·ªÉm s·ªë theo th√°ng",
            markers=True,
            line_shape='spline',
            color_discrete_sequence=[CHART_COLORS['primary']]
        )
        
        TinhChartRenderer._update_trend_layout(fig)
        st.plotly_chart(fig, use_container_width=True)
    
    @staticmethod
    def _prepare_trend_data(df: pd.DataFrame) -> pd.DataFrame:
        """Chu·∫©n b·ªã d·ªØ li·ªáu trend"""
        df['TB_SCORE'] = pd.to_numeric(df['TB_SCORE'])
        df['MONTH'] = pd.to_numeric(df['MONTH'])
        return df.sort_values('MONTH')
    
    @staticmethod
    def _update_trend_layout(fig):
        """C·∫≠p nh·∫≠t layout cho trend chart"""
        fig.update_layout(
            xaxis_title="Th√°ng",
            yaxis_title="ƒêi·ªÉm s·ªë trung b√¨nh",
            hovermode='x unified'
        )
        
        # Th√™m ƒë∆∞·ªùng chu·∫©n
        fig.add_hline(y=70, line_dash="dash", line_color="red", 
                     annotation_text="Chu·∫©n t·ªëi thi·ªÉu (70 ƒëi·ªÉm)")
        fig.add_hline(y=85, line_dash="dash", line_color="green",
                     annotation_text="Chu·∫©n kh√° (85 ƒëi·ªÉm)")
    
    @staticmethod
    def render_gauge_chart(data: Dict[str, Any]):
        """Render bi·ªÉu ƒë·ªì gauge"""
        if not data.get('diem_tonghop'):
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm t·ªïng h·ª£p")
            return
        
        current_score = float(data['diem_tonghop'][0]['TB_SCORE'])
        
        fig = go.Figure(go.Indicator(
            mode="gauge+number+delta",
            value=current_score,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "ƒêi·ªÉm c·∫£ nƒÉm"},
            delta={'reference': 70},
            gauge=TinhChartRenderer._get_gauge_config()
        ))
        
        st.plotly_chart(fig, use_container_width=True)
    
    @staticmethod
    def _get_gauge_config() -> Dict:
        """C·∫•u h√¨nh cho gauge chart"""
        return {
            'axis': {'range': [None, 100]},
            'bar': {'color': CHART_COLORS['primary']},
            'steps': [
                {'range': [0, 50], 'color': "lightgray"},
                {'range': [50, 70], 'color': "yellow"},
                {'range': [70, 85], 'color': "orange"},
                {'range': [85, 100], 'color': "green"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 90
            }
        }
    
    @staticmethod
    def render_chi_so_766(data: Dict[str, Any]):
        """Render 7 nh√≥m ch·ªâ s·ªë theo Qƒê 766"""
        if not data.get('chiso'):
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë")
            return
        
        st.subheader("üìä 7 Nh√≥m ch·ªâ s·ªë theo Quy·∫øt ƒë·ªãnh 766/Qƒê-TTg")
        
        df_chiso = TinhChartRenderer._prepare_chiso_data(data['chiso'])
        
        # T·∫°o bi·ªÉu ƒë·ªì radar
        fig = TinhChartRenderer._create_radar_chart(df_chiso)
        st.plotly_chart(fig, use_container_width=True)
        
        # B·∫£ng chi ti·∫øt
        TinhChartRenderer._render_chiso_table(df_chiso)
    
    @staticmethod
    def _prepare_chiso_data(chiso_data: List[Dict]) -> pd.DataFrame:
        """Chu·∫©n b·ªã d·ªØ li·ªáu ch·ªâ s·ªë"""
        df = pd.DataFrame(chiso_data)
        numeric_columns = ['TB_SCORE', 'MAX_SCORE', 'SCORE']
        for col in numeric_columns:
            df[col] = pd.to_numeric(df[col])
        return df
    
    @staticmethod
    def _create_radar_chart(df: pd.DataFrame) -> go.Figure:
        """T·∫°o bi·ªÉu ƒë·ªì radar"""
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=df['TB_SCORE'].tolist(),
            theta=df['DESCRIPTION'].tolist(),
            fill='toself',
            name='ƒêi·ªÉm hi·ªán t·∫°i',
            line_color=CHART_COLORS['primary']
        ))
        
        fig.add_trace(go.Scatterpolar(
            r=[100] * len(df),
            theta=df['DESCRIPTION'].tolist(),
            fill='toself',
            name='ƒêi·ªÉm t·ªëi ƒëa (100%)',
            line_color=CHART_COLORS.get('danger', 'red'),
            opacity=0.3
        ))
        
        fig.update_layout(
            polar=dict(radialaxis=dict(visible=True, range=[0, 100])),
            showlegend=True,
            title="Bi·ªÉu ƒë·ªì radar 7 nh√≥m ch·ªâ s·ªë"
        )
        
        return fig
    
    @staticmethod
    def _render_chiso_table(df: pd.DataFrame):
        """Render b·∫£ng chi ti·∫øt ch·ªâ s·ªë"""
        st.subheader("üìã Chi ti·∫øt 7 nh√≥m ch·ªâ s·ªë")
        df_display = df[['CODE', 'DESCRIPTION', 'SCORE', 'MAX_SCORE', 'TB_SCORE']].copy()
        df_display.columns = ['M√£', 'T√™n ch·ªâ s·ªë', 'ƒêi·ªÉm ƒë·∫°t', 'ƒêi·ªÉm t·ªëi ƒëa', 'T·ª∑ l·ªá %']
        df_display['T·ª∑ l·ªá %'] = df_display['T·ª∑ l·ªá %'].round(2)
        st.dataframe(df_display, use_container_width=True)


class TinhMetricsRenderer:
    """Class chuy√™n x·ª≠ l√Ω vi·ªác render metrics cho t·ªânh"""
    
    def __init__(self, summary: Dict[str, Any]):
        self.summary = summary
    
    def render_all_metrics(self):
        """Render t·∫•t c·∫£ c√°c nh√≥m metrics"""
        metrics_groups = [
            ('üìä T·ªîNG H·ª¢P H·ªí S∆íO, K·∫æT QU·∫¢ X·ª¨ L√ù', self._render_tong_hop_metrics),
            ('üìù H√åNH TH·ª®C N·ªòP H·ªí S∆íO TH·ª¶ T·ª§C H√ÄNH CH√çNH', self._render_hinh_thuc_nop_metrics),
            ('üì§ H√åNH TH·ª®C TR·∫¢ K·∫æT QU·∫¢ TH·ª¶ T·ª§C H√ÄNH CH√çNH', self._render_hinh_thuc_tra_metrics),
            ('‚ö° K·∫æT QU·∫¢ X·ª¨ L√ù', self._render_ket_qua_xl_metrics),
            ('üí≥ GIAO D·ªäCH THANH TO√ÅN TR·ª∞C TUY·∫æN', self._render_thanh_toan_metrics),
            ('üì¢ NH·∫¨N V√Ä X·ª¨ L√ù KI·∫æN NGH·ªä, PH·∫¢N √ÅNH', self._render_kien_nghi_metrics),
            ('üìä T·ª∂ L·ªÜ V√Ä C√ÅC CH·ªà S·ªê KH√ÅC', self._render_ty_le_khac_metrics),
            ('üìù KH√îNG PH√ÅT SINH/C√ÅC CH·ªà S·ªê KH√ÅC', self._render_khong_phat_sinh_metrics)
        ]
        
        for title, render_func in metrics_groups:
            st.header(title)
            render_func()
            st.divider()
    
    def _render_tong_hop_metrics(self):
        """Render metrics t·ªïng h·ª£p h·ªì s∆°"""
        col1, col2, col3 = st.columns(3)
        
        with col1:
            hs_total = safe_int(self.summary.get('HS_TOTAL', 0))
            self._render_metric(
                "üìã T·ªïng s·ªë h·ªì s∆° TTHC ti·∫øp nh·∫≠n, gi·∫£i quy·∫øt",
                f"{hs_total:,}".replace(',', '.'),
                None,
                "HS_TOTAL: T·ªïng s·ªë h·ªì s∆° th·ªß t·ª•c h√†nh ch√≠nh (TTHC) ti·∫øp nh·∫≠n, gi·∫£i quy·∫øt"
            )
        
        with col2:
            db_total = safe_int(self.summary.get('DB_TOTAL', 0))
            db_rate = (db_total / hs_total * 100) if hs_total > 0 else 0
            self._render_metric(
                "‚òÅÔ∏è T·ªïng s·ªë h·ªì s∆° ƒë·ªìng b·ªô l√™n DVCQG",
                f"{db_total:,}".replace(',', '.'),
                f"T·ª∑ l·ªá: {db_rate:.1f}%",
                "DB_TOTAL: T·ªïng s·ªë h·ªì s∆° ƒë√£ ƒë·ªìng b·ªô l√™n C·ªïng D·ªãch v·ª• c√¥ng Qu·ªëc gia"
            )
        
        with col3:
            tntk_total = safe_int(self.summary.get('TNTK_TOTAL', 0))
            self._render_metric(
                "üìà S·ªë TTHC ƒë∆∞·ª£c t√≠nh to√°n th·ªëng k√™",
                f"{tntk_total:,}".replace(',', '.'),
                None,
                "TNTK_TOTAL: T·ªïng s·ªë th·ªß t·ª•c h√†nh ch√≠nh ƒë∆∞·ª£c t√≠nh to√°n th·ªëng k√™ trong k·ª≥ b√°o c√°o"
            )
    
    def _render_hinh_thuc_nop_metrics(self):
        """Render metrics h√¨nh th·ª©c n·ªôp"""
        # Row 1: N·ªôp tr·ª±c ti·∫øp v√† b∆∞u ch√≠nh
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            tructiep_rate = safe_number(self.summary.get('HTN_TRUCTIEP', 0))
            self._render_metric(
                "üè¢ T·ª∑ l·ªá n·ªôp tr·ª±c ti·∫øp",
                f"{tructiep_rate:.1f}%",
                None,
                "HTN_TRUCTIEP: T·ª∑ l·ªá h·ªì s∆° n·ªôp tr·ª±c ti·∫øp t·∫°i b·ªô ph·∫≠n ti·∫øp nh·∫≠n"
            )
        
        with col2:
            tructiep_total = safe_int(self.summary.get('HTN_TRUCTIEP_TOTAL', 0))
            self._render_metric(
                "üè¢ S·ªë l∆∞·ª£ng n·ªôp tr·ª±c ti·∫øp",
                f"{tructiep_total:,}".replace(',', '.'),
                f"{tructiep_rate:.1f}% t·ªïng h·ªì s∆°" if tructiep_rate > 0 else None,
                "HTN_TRUCTIEP_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° n·ªôp tr·ª±c ti·∫øp"
            )
        
        with col3:
            buuchinh_rate = safe_number(self.summary.get('HTN_BUUCHINH', 0))
            self._render_metric(
                "üìÆ T·ª∑ l·ªá n·ªôp qua b∆∞u ch√≠nh",
                f"{buuchinh_rate:.1f}%",
                None,
                "HTN_BUUCHINH: T·ª∑ l·ªá h·ªì s∆° n·ªôp qua b∆∞u ch√≠nh"
            )
        
        with col4:
            buuchinh_total = safe_int(self.summary.get('HTN_BUUCHINH_TOTAL', 0))
            self._render_metric(
                "üìÆ S·ªë l∆∞·ª£ng n·ªôp qua b∆∞u ch√≠nh",
                f"{buuchinh_total:,}".replace(',', '.'),
                f"{buuchinh_rate:.1f}% t·ªïng h·ªì s∆°" if buuchinh_rate > 0 else None,
                "HTN_BUUCHINH_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° n·ªôp qua b∆∞u ch√≠nh"
            )
        
        # Row 2: N·ªôp tr·ª±c tuy·∫øn
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            tructuyen_rate = safe_number(self.summary.get('HTN_TRUCTUYEN', 0))
            delta_color = "normal" if tructuyen_rate >= 70 else "inverse"
            self._render_metric(
                "üíª T·ª∑ l·ªá n·ªôp tr·ª±c tuy·∫øn chu·∫©n",
                f"{tructuyen_rate:.1f}%",
                f"{tructuyen_rate - 70:.1f}% so v·ªõi chu·∫©n (70%)",
                "HTN_TRUCTUYEN: T·ª∑ l·ªá h·ªì s∆° n·ªôp tr·ª±c tuy·∫øn (online)",
                delta_color
            )
        
        with col2:
            tructuyen_total = safe_int(self.summary.get('HTN_TRUCTUYEN_TOTAL', 0))
            self._render_metric(
                "üíª S·ªë l∆∞·ª£ng n·ªôp tr·ª±c tuy·∫øn chu·∫©n",
                f"{tructuyen_total:,}".replace(',', '.'),
                f"{tructuyen_rate:.1f}% t·ªïng h·ªì s∆°" if tructuyen_rate > 0 else None,
                "HTN_TRUCTUYEN_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° n·ªôp tr·ª±c tuy·∫øn chu·∫©n"
            )
        
        with col3:
            tructuyen_kc_rate = safe_number(self.summary.get('HTN_TRUCTUYEN_KHONGCHUAN', 0))
            delta_color = "inverse" if tructuyen_kc_rate > 10 else "normal"
            self._render_metric(
                "üìß T·ª∑ l·ªá tr·ª±c tuy·∫øn kh√¥ng chu·∫©n",
                f"{tructuyen_kc_rate:.1f}%",
                None,
                "HTN_TRUCTUYEN_KHONGCHUAN: T·ª∑ l·ªá h·ªì s∆° n·ªôp tr·ª±c tuy·∫øn ch∆∞a chu·∫©n h√≥a",
                delta_color
            )
        
        with col4:
            tructuyen_kc_total = safe_int(self.summary.get('HTN_TRUCTUYEN_KHONGCHUAN_TOTAL', 0))
            self._render_metric(
                "üìß S·ªë l∆∞·ª£ng tr·ª±c tuy·∫øn kh√¥ng chu·∫©n",
                f"{tructuyen_kc_total:,}".replace(',', '.'),
                f"{tructuyen_kc_rate:.1f}% t·ªïng h·ªì s∆°" if tructuyen_kc_rate > 0 else None,
                "HTN_TRUCTUYEN_KHONGCHUAN_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° n·ªôp tr·ª±c tuy·∫øn kh√¥ng chu·∫©n"
            )
    
    def _render_hinh_thuc_tra_metrics(self):
        """Render metrics h√¨nh th·ª©c tr·∫£ k·∫øt qu·∫£"""
        col1, col2, col3, col4 = st.columns(4)
        
        metrics_config = [
            ("‚úÖ T·ª∑ l·ªá tr·∫£ k·∫øt qu·∫£ ƒë√∫ng h·∫°n", 'HTDH', 90, "HTDH: T·ª∑ l·ªá h·ªì s∆° tr·∫£ k·∫øt qu·∫£ ƒë√∫ng h·∫°n"),
            ("‚úÖ S·ªë l∆∞·ª£ng tr·∫£ k·∫øt qu·∫£ ƒë√∫ng h·∫°n", 'HTDH_TOTAL', None, "HTDH_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° tr·∫£ k·∫øt qu·∫£ ƒë√∫ng h·∫°n"),
            ("‚ùå T·ª∑ l·ªá tr·∫£ k·∫øt qu·∫£ qu√° h·∫°n", 'HTQH', 10, "HTQH: T·ª∑ l·ªá h·ªì s∆° tr·∫£ k·∫øt qu·∫£ qu√° h·∫°n"),
            ("‚ùå S·ªë l∆∞·ª£ng tr·∫£ k·∫øt qu·∫£ qu√° h·∫°n", 'HTQH_TOTAL', None, "HTQH_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° tr·∫£ k·∫øt qu·∫£ qu√° h·∫°n")
        ]
        
        columns = [col1, col2, col3, col4]
        for i, (label, key, benchmark, help_text) in enumerate(metrics_config):
            with columns[i]:
                self._render_benchmark_metric(label, key, benchmark, help_text)
    
    def _render_ket_qua_xl_metrics(self):
        """Render metrics k·∫øt qu·∫£ x·ª≠ l√Ω"""
        col1, col2, col3, col4 = st.columns(4)
        
        metrics_config = [
            ("‚úÖ T·ª∑ l·ªá x·ª≠ l√Ω ƒë√∫ng h·∫°n", 'DXLTH', 95, "DXLTH: T·ª∑ l·ªá h·ªì s∆° x·ª≠ l√Ω ƒë√∫ng h·∫°n (%)"),
            ("‚úÖ S·ªë l∆∞·ª£ng x·ª≠ l√Ω ƒë√∫ng h·∫°n", 'DXLTH_TOTAL', None, "DXLTH_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° x·ª≠ l√Ω ƒë√∫ng h·∫°n"),
            ("‚ùå T·ª∑ l·ªá x·ª≠ l√Ω qu√° h·∫°n", 'DXLQH', 5, "DXLQH: T·ª∑ l·ªá h·ªì s∆° x·ª≠ l√Ω qu√° h·∫°n (%)"),
            ("‚ùå S·ªë l∆∞·ª£ng x·ª≠ l√Ω qu√° h·∫°n", 'DXLQH_TOTAL', None, "DXLQH_TOTAL: S·ªë l∆∞·ª£ng h·ªì s∆° x·ª≠ l√Ω qu√° h·∫°n")
        ]
        
        columns = [col1, col2, col3, col4]
        for i, (label, key, benchmark, help_text) in enumerate(metrics_config):
            with columns[i]:
                self._render_benchmark_metric(label, key, benchmark, help_text)
    
    def _render_thanh_toan_metrics(self):
        """Render metrics thanh to√°n tr·ª±c tuy·∫øn"""
        # Row 1: T·ª∑ l·ªá thanh to√°n
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            gdttdp_rate = safe_number(self.summary.get('GDTTDP', 0))
            self._render_metric(
                "üè™ T·ª∑ l·ªá thanh to√°n ƒëi·ªán t·ª≠ ƒë·ªãa ph∆∞∆°ng",
                f"{gdttdp_rate:.1f}%",
                None,
                "GDTTDP: T·ª∑ l·ªá giao d·ªãch thanh to√°n ƒëi·ªán t·ª≠ ƒë·ªëi v·ªõi d·ªãch v·ª• c√¥ng ƒë·ªãa ph∆∞∆°ng"
            )
        
        with col2:
            gdttqg_rate = safe_number(self.summary.get('GDTTQG', 0))
            self._render_metric(
                "üåê T·ª∑ l·ªá thanh to√°n qua DVCQG",
                f"{gdttqg_rate:.1f}%",
                f"{gdttqg_rate - 50:.1f}% so v·ªõi m·ª•c ti√™u (50%)" if gdttqg_rate > 0 else None,
                "GDTTQG: T·ª∑ l·ªá giao d·ªãch thanh to√°n ƒëi·ªán t·ª≠ th√¥ng qua C·ªïng D·ªãch v·ª• c√¥ng Qu·ªëc gia"
            )
        
        with col3:
            gdtt_total = safe_int(self.summary.get('GDTT_TOTAL', 0))
            self._render_metric(
                "üí∞ T·ªïng h·ªì s∆° c√≥ thanh to√°n ƒëi·ªán t·ª≠",
                f"{gdtt_total:,}".replace(',', '.'),
                None,
                "GDTT_TOTAL: T·ªïng s·ªë h·ªì s∆° c√≥ ph√°t sinh giao d·ªãch thanh to√°n ƒëi·ªán t·ª≠"
            )
        
        with col4:
            gdttqg_total = safe_int(self.summary.get('GDTTQG_TOTAL', 0))
            self._render_metric(
                "üåê Giao d·ªãch thanh to√°n qua DVCQG",
                f"{gdttqg_total:,}".replace(',', '.'),
                f"{gdttqg_rate:.1f}% t·ªïng giao d·ªãch" if gdttqg_rate > 0 else None,
                "GDTTQG_TOTAL: T·ªïng s·ªë giao d·ªãch thanh to√°n ƒëi·ªán t·ª≠ th·ª±c hi·ªán qua DVCQG"
            )
        
        # Row 2: TTHC tr√™n DVCQG
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            nttqg_total = safe_int(self.summary.get('NTTQG_TOTAL', 0))
            self._render_metric(
                "üìã TTHC cung c·∫•p tr√™n DVCQG",
                f"{nttqg_total:,}".replace(',', '.'),
                None,
                "NTTQG_TOTAL: S·ªë l∆∞·ª£ng th·ªß t·ª•c h√†nh ch√≠nh ƒë∆∞·ª£c cung c·∫•p tr√™n DVCQG"
            )
    
    def _render_kien_nghi_metrics(self):
        """Render metrics ki·∫øn ngh·ªã, ph·∫£n √°nh"""
        col1, col2, col3, col4 = st.columns(4)
        
        metrics_config = [
            ("‚úÖ T·ª∑ l·ªá x·ª≠ l√Ω ki·∫øn ngh·ªã ƒë√∫ng h·∫°n", 'NTTDXLTH', 95, "NTTDXLTH: T·ª∑ l·ªá ki·∫øn ngh·ªã, ph·∫£n √°nh x·ª≠ l√Ω ƒë√∫ng h·∫°n"),
            ("‚úÖ S·ªë ki·∫øn ngh·ªã x·ª≠ l√Ω ƒë√∫ng h·∫°n", 'NTTDXLTH_TOTAL', None, "NTTDXLTH_TOTAL: S·ªë l∆∞·ª£ng ki·∫øn ngh·ªã, ph·∫£n √°nh x·ª≠ l√Ω ƒë√∫ng h·∫°n"),
            ("‚ùå T·ª∑ l·ªá x·ª≠ l√Ω ki·∫øn ngh·ªã qu√° h·∫°n", 'NTTDXLQH', 5, "NTTDXLQH: T·ª∑ l·ªá ki·∫øn ngh·ªã, ph·∫£n √°nh qu√° h·∫°n x·ª≠ l√Ω"),
            ("‚ùå S·ªë ki·∫øn ngh·ªã x·ª≠ l√Ω qu√° h·∫°n", 'NTTDXLQH_TOTAL', None, "NTTDXLQH_TOTAL: S·ªë l∆∞·ª£ng ki·∫øn ngh·ªã, ph·∫£n √°nh qu√° h·∫°n x·ª≠ l√Ω")
        ]
        
        columns = [col1, col2, col3, col4]
        for i, (label, key, benchmark, help_text) in enumerate(metrics_config):
            with columns[i]:
                self._render_benchmark_metric(label, key, benchmark, help_text)
    
    def _render_ty_le_khac_metrics(self):
        """Render t·ª∑ l·ªá v√† c√°c ch·ªâ s·ªë kh√°c"""
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            tile_value = safe_number(self.summary.get('TILE', 0))
            delta_color = "normal" if tile_value >= 85 else "inverse"
            self._render_metric(
                "üéØ T·ª∑ l·ªá ƒë·∫°t ch·ªâ ti√™u t·ªïng",
                f"{tile_value:.1f}%",
                f"{tile_value - 85:.1f}% so v·ªõi chu·∫©n (85%)",
                "TILE: T·ª∑ l·ªá t·ªïng h·ªì s∆° ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng quy tr√¨nh, ƒë√∫ng h·∫°n",
                delta_color
            )
        
        with col2:
            tile_db_rate = safe_number(self.summary.get('TILE_DB', 0))
            delta_color = "normal" if tile_db_rate >= 95 else "inverse"
            self._render_metric(
                "üìã T·ª∑ l·ªá TTHC c√¥ng b·ªë ƒë√∫ng h·∫°n",
                f"{tile_db_rate:.1f}%",
                f"{tile_db_rate - 95:.1f}% so v·ªõi chu·∫©n (95%)",
                "TILE_DB: T·ª∑ l·ªá th·ªß t·ª•c h√†nh ch√≠nh c√¥ng b·ªë ƒë√∫ng h·∫°n",
                delta_color
            )
    
    def _render_khong_phat_sinh_metrics(self):
        """Render metrics kh√¥ng ph√°t sinh"""
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            tnktcs_total = safe_int(self.summary.get('TNKTCS_TOTAL', 0))
            self._render_metric(
                "üìù H·ªì s∆° kh√¥ng ph√°t sinh",
                f"{tnktcs_total:,}".replace(',', '.'),
                None,
                "TNKTCS_TOTAL: T·ªïng s·ªë h·ªì s∆° (th·ªß t·ª•c) kh√¥ng ph√°t sinh trong k·ª≥ b√°o c√°o"
            )
    
    def _render_benchmark_metric(self, label: str, key: str, benchmark: Optional[float], help_text: str):
        """Render metric v·ªõi benchmark"""
        if key.endswith('_TOTAL'):
            value = safe_int(self.summary.get(key, 0))
            formatted_value = f"{value:,}".replace(',', '.')
            rate_key = key.replace('_TOTAL', '')
            rate = safe_number(self.summary.get(rate_key, 0))
            delta = f"{rate:.1f}% t·ªïng" if rate > 0 else None
            delta_color = "inverse" if "qu√° h·∫°n" in label and value > 0 else "normal"
        else:
            rate = safe_number(self.summary.get(key, 0))
            formatted_value = f"{rate:.1f}%"
            if benchmark:
                if "qu√° h·∫°n" in label:
                    delta = f"V∆∞·ª£t {rate:.1f}% gi·ªõi h·∫°n" if rate > benchmark else f"D∆∞·ªõi gi·ªõi h·∫°n {benchmark}%"
                    delta_color = "inverse" if rate > benchmark else "normal"
                else:
                    delta = f"{rate - benchmark:.1f}% so v·ªõi chu·∫©n ({benchmark}%)"
                    delta_color = "normal" if rate >= benchmark else "inverse"
            else:
                delta = None
                delta_color = "normal"
        
        self._render_metric(label, formatted_value, delta, help_text, delta_color)
    
    def _render_metric(self, label: str, value: str, delta: Optional[str], 
                      help_text: str, delta_color: str = "normal"):
        """Render m·ªôt metric"""
        st.metric(
            label=label,
            value=value,
            delta=delta,
            delta_color=delta_color,
            help=help_text
        )


# Utility functions
def safe_number(value: Union[str, int, float, None], default: float = 0) -> float:
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã v·ªÅ s·ªë, tr·∫£ v·ªÅ default n·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi"""
    try:
        return float(value) if value is not None else default
    except (ValueError, TypeError):
        return default


def safe_int(value: Union[str, int, float, None], default: int = 0) -> int:
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã v·ªÅ s·ªë nguy√™n, tr·∫£ v·ªÅ default n·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi"""
    try:
        return int(float(value)) if value is not None else default
    except (ValueError, TypeError):
        return default


# Entry point function - t∆∞∆°ng th√≠ch v·ªõi code c≈©
def render_tinh_view(data: Dict[str, Any], tinh_name: str):
    """Entry point ch√≠nh - t∆∞∆°ng th√≠ch v·ªõi code c≈©"""
    renderer = TinhViewRenderer(data, tinh_name)
    renderer.render()
