import streamlit as st
import pandas as pd
import plotly.express as px
from utils.config import CHART_COLORS


def render_xa_view(data):
    if not data['766_report_filtered_xa']:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu TTHC chi ti·∫øt")
        return
        
    tthc_data = data['766_report_filtered_xa']

    if tthc_data:
        # T·∫°o selectbox ƒë·ªÉ ch·ªçn x√£
        def format_tthc_option(item):
            return f"{item['TEN']} (MA_COQUAN: {item['MA_COQUAN']})"
        
        # T·∫°o danh s√°ch options
        tthc_options = [format_tthc_option(item) for item in tthc_data]
        
        selected_option = st.selectbox(
            "üè¢ Ch·ªçn x√£ ƒë·ªÉ xem b√°o c√°o:",
            options=tthc_options,
            index=0,
            help="Ch·ªçn ƒë∆°n v·ªã ƒë·ªÉ xem b√°o c√°o chi ti·∫øt 766",
            key="xa_selector"
        )
        
        # L·∫•y th√¥ng tin c·ªßa item ƒë∆∞·ª£c ch·ªçn
        selected_index = tthc_options.index(selected_option)
        selected_tthc = tthc_data[selected_index]
        
        # S·ª≠ d·ª•ng cho c√°c x·ª≠ l√Ω ti·∫øp theo
        selected_tthc_id = selected_tthc['MA_COQUAN']
        selected_tthc_name = selected_tthc['TEN']
        
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu x√£ ƒë·ªÉ hi·ªÉn th·ªã")
        return

    # Hi·ªÉn th·ªã ch·ªâ s·ªë 766 theo format y√™u c·∫ßu
    st.subheader(f"{selected_tthc_name}", divider='rainbow')
    
    # L·∫•y d·ªØ li·ªáu ch·ªâ s·ªë 766 t·ª´ data['report_766']
    if 'report_766' in data and data['report_766']:
        # T√¨m item t∆∞∆°ng ·ª©ng v·ªõi selected_tthc_id
        item = next((item for item in data['report_766'] if item['MA_COQUAN'] == selected_tthc_id), None)
        
        if not item:
            st.error(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·ªâ s·ªë 766 cho {selected_tthc_name}")
            return
        
        # Chu·∫©n h√≥a tr∆∞·ªùng theo format y√™u c·∫ßu
        target = {
            "C√¥ng khai, minh b·∫°ch": float(item.get('CKMB', 0)),
            "Ti·∫øn ƒë·ªô gi·∫£i quy·∫øt": float(item.get('TDGQ', 0)),
            "D·ªãch v·ª• c√¥ng tr·ª±c tuy·∫øn": float(item.get('CLGQ', 0)),
            "Thanh to√°n tr·ª±c tuy·∫øn": float(item.get('TTTT', 0)),
            "M·ª©c ƒë·ªô h√†i l√≤ng": float(item.get('MDHL', 0)),
            "S·ªë h√≥a h·ªì s∆°": float(item.get('MDSH', 0)),
            "ƒêi·ªÉm t·ªïng": float(item.get('TONG_SCORE', 0)),
        }
        
        result = {"target": target, "raw": item}
        
        if result and "target" in result:
            # ƒêi·ªÉm chu·∫©n theo Qƒê 766
            standard = {
                "C√¥ng khai, minh b·∫°ch": 18,
                "Ti·∫øn ƒë·ªô gi·∫£i quy·∫øt": 20,
                "D·ªãch v·ª• c√¥ng tr·ª±c tuy·∫øn": 12,
                "Thanh to√°n tr·ª±c tuy·∫øn": 10,
                "M·ª©c ƒë·ªô h√†i l√≤ng": 18,
                "S·ªë h√≥a h·ªì s∆°": 22
            }
            
            # T·∫°o bi·ªÉu ƒë·ªì so s√°nh v·ªõi ƒëi·ªÉm chu·∫©n
            _plot_766_barchart(selected_tthc_name.split(' - ')[0], result["target"], standard)
        else:
            st.error(f"Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë 766 c·ªßa {selected_tthc_name}")
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu report_766")

    # TH√äM M·ªöI: Hi·ªÉn th·ªã b√°o c√°o chi ti·∫øt KGG
    _render_chitiet_report(data, selected_tthc_id, selected_tthc_name)
    _render_chitiet_report_online(data, selected_tthc_id, selected_tthc_name)
    _render_digitization_report(data, selected_tthc_id, selected_tthc_name)


def _render_chitiet_report(data, selected_tthc_id, selected_tthc_name):
    """Hi·ªÉn th·ªã b√°o c√°o chi ti·∫øt KGG"""
    
    st.subheader(f"üìã K·∫øt qu·∫£ x·ª≠ l√Ω h·ªì s∆° tr√™n m·ªôt c·ª≠a ƒëi·ªán t·ª≠: {selected_tthc_name}", divider='blue')
    
    if 'report_chitiet' not in data or not data['report_chitiet']:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o chi ti·∫øt")
        return
    
    chitiet_data = data['report_chitiet']
    
    # üî• L·ªåC D·ªÆ LI·ªÜU THEO CODE
    filtered_data = []
    debug_info = []  # ƒê·ªÉ debug
    
    for item in chitiet_data:
        # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu th·ª±c t·∫ø
        agency = item.get('agency', {})
        agency_id = agency.get('id', '') if agency else ''
        agency_code = agency.get('code', '') if agency else ''
        agency_name = agency.get('name', '') if agency else ''
        
        # Debug: Thu th·∫≠p th√¥ng tin ƒë·ªÉ ki·ªÉm tra
        debug_info.append({
            'agency_id': agency_id,
            'agency_code': agency_code,
            'agency_name': agency_name,
            'selected_id': selected_tthc_id
        })
        
        # üéØ CH·ªà L·ªåC THEO CODE
        if agency_code == selected_tthc_id:
            filtered_data.append(item)
    
        
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc
    if not filtered_data:
        st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªõi CODE: `{selected_tthc_id}`")
        st.info(f"üí° Hi·ªÉn th·ªã t·∫•t c·∫£ {len(chitiet_data)} b·∫£n ghi thay th·∫ø")
        filtered_data = chitiet_data
    # else:
    #     st.success(f"‚úÖ T√¨m th·∫•y {len(filtered_data)} b·∫£n ghi v·ªõi CODE: `{selected_tthc_id}`")
    
    # Hi·ªÉn th·ªã chi ti·∫øt
    _render_chitiet_detail_table(filtered_data)
 

def _render_chitiet_detail_table(data):
    """Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt - ch·ªâ s·ªë li·ªáu"""
    
    if not data:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        return
    
    # T·∫°o DataFrame v·ªõi c√°c tr∆∞·ªùng ch√≠nh
    display_data = []
    for item in data:
        agency = item.get('agency', {})
        display_data.append({
            'T√™n c∆° quan': agency.get('name', 'N/A'),
            # 'M√£ c∆° quan': agency.get('code', 'N/A'),
            # 'C·∫•p ƒë·ªô': agency.get('level', 'N/A'),
            'ƒê√£ nh·∫≠n': f"{item.get('received', 0):,}".replace(',', '.'),
            'ƒê√£ gi·∫£i quy·∫øt': f"{item.get('resolved', 0):,}".replace(',', '.'),
            'Tr·ª±c tuy·∫øn': f"{item.get('receivedOnline', 0):,}".replace(',', '.'),
            'Tr·ª±c ti·∫øp': f"{item.get('receivedDirect', 0):,}".replace(',', '.'),
            'Qu√° h·∫°n': f"{item.get('resolvedOverdue', 0):,}".replace(',', '.'),
        })
    
    st.markdown('#### Th·ªëng k√™ t·ªïng h·ª£p x·ª≠ l√Ω h·ªì s∆°')
    df = pd.DataFrame(display_data)
    
    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(df, use_container_width=True, hide_index=True)


def _render_chitiet_report_online(data, selected_tthc_id, selected_tthc_name):
    """Hi·ªÉn th·ªã b√°o c√°o chi ti·∫øt online KGG"""
  
    if 'report_chitiet_online' not in data or not data['report_chitiet_online']:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o chi ti·∫øt c√°c TTHC online")
        return
    
    chitiet_data = data['report_chitiet_online']
    
    # üî• L·ªåC D·ªÆ LI·ªÜU THEO AGENCY_NAME
    filtered_data = []
    debug_info = []  # ƒê·ªÉ debug
    
    # üéØ LO·∫†I B·ªé " - t·ªânh An Giang" KH·ªéI T√äN
    clean_selected_name = selected_tthc_name #.replace(" - t·ªânh An Giang", "").strip()
    
    for item in chitiet_data:
        agency_id = item.get('agency_id', '')
        agency_name = item.get('agency_name', '')
        
        # Debug: Thu th·∫≠p th√¥ng tin ƒë·ªÉ ki·ªÉm tra
        debug_info.append({
            'agency_id': agency_id,
            'agency_name': agency_name,
            'selected_name': selected_tthc_name,
            'clean_selected_name': clean_selected_name
        })
        
        # üéØ L·ªåC THEO AGENCY_NAME (so s√°nh t√™n ƒë√£ l√†m s·∫°ch)
        # L·ªçc theo logic: clean_selected_name contains agency_name
        agency_name_lower = agency_name.lower()
        clean_selected_name_lower = clean_selected_name.lower()

        if (agency_name_lower == clean_selected_name_lower or 
            agency_name_lower in clean_selected_name_lower):
            filtered_data.append(item)

    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc
    if not filtered_data:
        st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªõi T√äN: `{clean_selected_name}`")
        st.info(f"üí° Hi·ªÉn th·ªã t·∫•t c·∫£ {len(chitiet_data)} b·∫£n ghi thay th·∫ø")
        filtered_data = chitiet_data
    
    # Hi·ªÉn th·ªã chi ti·∫øt
    _render_chitiet_online_detail_table(filtered_data)



def _render_chitiet_online_detail_table(data):
    """Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt online - ch·ªâ s·ªë li·ªáu"""
    
    if not data:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        return
    
    # T·∫°o DataFrame v·ªõi c√°c tr∆∞·ªùng m·ªõi theo c·∫•u tr√∫c d·ªØ li·ªáu m·∫£ng
    display_data = []
    for item in data:
        display_data.append({
            # 'T√™n c∆° quan': item.get('agency_name', 'N/A'),
            # 'C∆° quan cha': item.get('parent_name', 'N/A'),
            'Ph√°t sinh 1 ph·∫ßn': f"{item.get('phatsinh_1phan_quantity', 0):,}".replace(',', '.'),
            'Ph√°t sinh to√†n ph·∫ßn': f"{item.get('phatsinh_toanphan_quantity', 0):,}".replace(',', '.'),
            'Ch·ªù ti·∫øp nh·∫≠n': f"{item.get('chotiepnhan_quantity', 0):,}".replace(',', '.'),
            'ƒê√£ ti·∫øp nh·∫≠n': f"{item.get('datiepnhan_quantity', 0):,}".replace(',', '.'),
            'Ho√†n th√†nh': f"{item.get('hoanthanh_quantity', 0):,}".replace(',', '.'),
            'T·ª´ ch·ªëi': f"{item.get('tuchoi_quantity', 0):,}".replace(',', '.'),
            'Thanh to√°n online': f"{item.get('onlinepaid_quantity', 0):,}".replace(',', '.'),
            'T·ªïng c·ªông': f"{item.get('total', 0):,.1f}".replace(',', '.'),
        })
    
    st.markdown('#### Th·ªëng k√™ s·ªë li·ªáu v·ªÅ h·ªì s∆° tr·ª±c tuy·∫øn')
    df = pd.DataFrame(display_data)
    
    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(df, use_container_width=True, hide_index=True)

def _render_digitization_report(data, selected_tthc_id, selected_tthc_name):
    """Hi·ªÉn th·ªã b√°o c√°o s·ªë h√≥a KGG"""
    
    if 'report_digitization' not in data or not data['report_digitization']:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o chi ti·∫øt")
        return
    
    chitiet_data = data['report_digitization']
    
    # üî• L·ªåC D·ªÆ LI·ªÜU THEO CODE
    filtered_data = []
    debug_info = []  # ƒê·ªÉ debug
    
    for item in chitiet_data:
        # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu th·ª±c t·∫ø
        agency = item.get('agency', {})
        agency_id = agency.get('id', '') if agency else ''
        agency_code = agency.get('code', '') if agency else ''
        agency_name = agency.get('name', '') if agency else ''
        
        # Debug: Thu th·∫≠p th√¥ng tin ƒë·ªÉ ki·ªÉm tra
        debug_info.append({
            'agency_id': agency_id,
            'agency_code': agency_code,
            'agency_name': agency_name,
            'selected_id': selected_tthc_id
        })
        
        # üéØ CH·ªà L·ªåC THEO CODE
        if agency_code == selected_tthc_id:
            filtered_data.append(item)
    
        
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc
    if not filtered_data:
        st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªõi CODE: `{selected_tthc_id}`")
        st.info(f"üí° Hi·ªÉn th·ªã t·∫•t c·∫£ {len(chitiet_data)} b·∫£n ghi thay th·∫ø")
        filtered_data = chitiet_data
    # else:
    #     st.success(f"‚úÖ T√¨m th·∫•y {len(filtered_data)} b·∫£n ghi v·ªõi CODE: `{selected_tthc_id}`")
    
    # Hi·ªÉn th·ªã chi ti·∫øt
    _render_digitization_report_table(filtered_data)
 

def _render_digitization_report_table(data):
    """Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt - ch·ªâ s·ªë li·ªáu"""
    
    if not data:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        return
    
    # T·∫°o DataFrame v·ªõi c√°c tr∆∞·ªùng ch√≠nh
    display_data = []
    for item in data:
        agency = item.get('agency', {})
        display_data.append({
            'T·ªïng ti·∫øp nh·∫≠n': f"{item.get('totalReceiver', 0):,}".replace(',', '.'),
            'Ti·∫øp nh·∫≠n c√≥ file': f"{item.get('totalReceiverHavingFile', 0):,}".replace(',', '.'),
            'T·ªïng ho√†n th√†nh': f"{item.get('totalComplete', 0):,}".replace(',', '.'),
            'Ho√†n th√†nh c√≥ file': f"{item.get('totalCompleteHavingFile', 0):,}".replace(',', '.'),
            'Ti·∫øp nh·∫≠n kh√¥ng file': f"{item.get('totalReceiverNopeFile', 0):,}".replace(',', '.'),
            'Ho√†n th√†nh kh√¥ng file': f"{item.get('totalCompleteNopeFile', 0):,}".replace(',', '.'),
            'Ti·∫øp nh·∫≠n & ho√†n th√†nh c√≥ file': f"{item.get('totalReceiverCompleteHavingFile', 0):,}".replace(',', '.'),
            '% Ti·∫øp nh·∫≠n c√≥ file': f"{item.get('percentTotalReceiverHavingFile', 0):.2f}%",
            '% Ho√†n th√†nh c√≥ file': f"{item.get('percentTotalCompleteHavingFile', 0):.2f}%",
            '% Ti·∫øp nh·∫≠n & ho√†n th√†nh c√≥ file': f"{item.get('percentTotalReceiverCompleteHavingFile', 0):.2f}%"
        })

    
    st.markdown('#### Th·ªëng k√™ h·ªì s∆° s·ªë h√≥a')
    df = pd.DataFrame(display_data)
    
    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(df, use_container_width=True, hide_index=True)

def _plot_766_barchart(unit_name, target_data, standard_data):
    """T·∫°o bi·ªÉu ƒë·ªì so s√°nh ch·ªâ s·ªë 766 v·ªõi ƒëi·ªÉm chu·∫©n"""
    
    # Lo·∫°i b·ªè "ƒêi·ªÉm t·ªïng" kh·ªèi comparison (v√¨ kh√¥ng c√≥ trong standard)
    comparison_keys = [key for key in target_data.keys() if key != "ƒêi·ªÉm t·ªïng"]
    
    # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
    df_chart = pd.DataFrame({
        'Ch·ªâ s·ªë': comparison_keys,
        'ƒêi·ªÉm ƒë·∫°t ƒë∆∞·ª£c': [target_data[key] for key in comparison_keys],
        'ƒêi·ªÉm chu·∫©n': [standard_data.get(key, 0) for key in comparison_keys]
    })
    
    # Chuy·ªÉn sang long format
    df_melted = df_chart.melt(
        id_vars=['Ch·ªâ s·ªë'], 
        value_vars=['ƒêi·ªÉm ƒë·∫°t ƒë∆∞·ª£c', 'ƒêi·ªÉm chu·∫©n'],
        var_name='Lo·∫°i ƒëi·ªÉm', 
        value_name='ƒêi·ªÉm s·ªë'
    )
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt nh√≥m
    fig = px.bar(
        df_melted,
        x='Ch·ªâ s·ªë',
        y='ƒêi·ªÉm s·ªë',
        color='Lo·∫°i ƒëi·ªÉm',
        title=f"So s√°nh ch·ªâ s·ªë 766: {unit_name} vs ƒêi·ªÉm chu·∫©n",
        barmode='group',
        color_discrete_map={
            'ƒêi·ªÉm ƒë·∫°t ƒë∆∞·ª£c': CHART_COLORS.get('primary', '#1f77b4'),
            'ƒêi·ªÉm chu·∫©n': CHART_COLORS.get('secondary', '#ff7f0e')
        },
        text='ƒêi·ªÉm s·ªë'
    )
    
    fig.update_layout(
        xaxis_title="C√°c ch·ªâ s·ªë ƒë√°nh gi√°",
        yaxis_title="ƒêi·ªÉm s·ªë",
        xaxis_tickangle=-45,
        showlegend=True,
        height=500,
        title_x=0.5
    )
    
    # Hi·ªÉn th·ªã gi√° tr·ªã tr√™n c·ªôt
    fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Hi·ªÉn th·ªã b·∫£ng so s√°nh
    st.subheader("üìä B·∫£ng so s√°nh chi ti·∫øt")
    
    # T√≠nh to√°n t·ª∑ l·ªá ƒë·∫°t ƒë∆∞·ª£c
    df_comparison = df_chart.copy()
    df_comparison['T·ª∑ l·ªá ƒë·∫°t (%)'] = (df_comparison['ƒêi·ªÉm ƒë·∫°t ƒë∆∞·ª£c'] / df_comparison['ƒêi·ªÉm chu·∫©n'] * 100).round(1)
    df_comparison['Ch√™nh l·ªách'] = (df_comparison['ƒêi·ªÉm ƒë·∫°t ƒë∆∞·ª£c'] - df_comparison['ƒêi·ªÉm chu·∫©n']).round(1)
    
    # T·∫°o c·ªôt ƒë√°nh gi√°
    def evaluate_score(row):
        ratio = row['T·ª∑ l·ªá ƒë·∫°t (%)']
        if ratio >= 100:
            return "‚úÖ ƒê·∫°t chu·∫©n"
        elif ratio >= 80:
            return "‚ö†Ô∏è G·∫ßn ƒë·∫°t"
        else:
            return "‚ùå Ch∆∞a ƒë·∫°t"
    
    df_comparison['ƒê√°nh gi√°'] = df_comparison.apply(evaluate_score, axis=1)
    
    st.dataframe(df_comparison, use_container_width=True, hide_index=True)
